{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["baseUrl","request","axios","get","nonExisting","id","content","date","important","then","response","data","concat","newObject","post","put","Note","note","toggleImportance","label","imporant","className","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","console","log","target","type","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.e5b187b9.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  return request.then((response) => response.data.concat(nonExisting));\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","import React from \"react\";\n\nexport const Note = ({ note, toggleImportance }) => {\n  const label = note.imporant ? \"make not important\" : \"make important\";\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n","import React from \"react\";\n\nexport const Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n","import React from \"react\";\n\nexport const Footer = () => {\n  const style = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n\n  return (\n    <div style={style}>\n      <br />\n      <em>\n        Note app, (c) 2021 - Department of Computer Science, University of\n        Helsinki\n      </em>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport noteService from \"./services/notes\";\nimport { Note } from \"./components/Note\";\nimport { Notification } from \"./components/Notification\";\nimport { Footer } from \"./components/Footer\";\n\nexport const App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, imporant: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        setErrorMessage(\n          `Note '${note.content}' was already deleted from server`\n        );\n        setTimeout(() => setErrorMessage(null), 5000);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      id: notes.length + 1,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes([...notes, returnedNote]);\n      setNewNote(\"\");\n    });\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}