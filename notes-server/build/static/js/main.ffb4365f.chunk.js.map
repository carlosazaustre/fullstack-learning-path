{"version":3,"sources":["services/noteService.js","services/loginService.js","components/Togglable.js","components/AddNoteForm.js","components/LoginForm.js","components/Note.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["baseUrl","token","getAll","a","axios","get","response","data","create","newObject","config","headers","Authorization","post","update","id","put","setToken","newToken","login","credentials","Togglable","React","forwardRef","ref","children","buttonLabel","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","onClick","className","displayName","AddNoteForm","createNote","newNote","setNewNote","onSubmit","event","preventDefault","content","important","type","value","onChange","target","LoginForm","onLogin","username","setUsername","password","setPassword","name","Note","note","toggleImportance","label","Notification","message","Footer","color","fontStyle","fontSize","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","user","setUser","noteFormRef","useRef","useEffect","noteService","then","initialNotes","loggedUserJSON","window","localStorage","getItem","JSON","parse","handleError","error","setTimeout","handleLogin","loginService","setItem","stringify","handleCreateNote","noteObject","current","returnedNote","toggleImportanceOf","find","n","changedNote","map","notesToShow","filter","onError","removeItem","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.ffb4365f.chunk.js","sourcesContent":["import axios from \"axios\";\nconst baseUrl = \"/api/notes\";\n\nlet token = null;\n\nconst setToken = (newToken) => {\n  token = `Bearer ${newToken}`;\n};\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl);\n  return response.data;\n};\n\nconst create = async (newObject) => {\n  const config = {\n    headers: { Authorization: token },\n  };\n\n  const response = await axios.post(baseUrl, newObject, config);\n  return response.data;\n};\n\nconst update = async (id, newObject) => {\n  const response = await axios.put(`${baseUrl}/${id}`, newObject);\n  return response.data;\n};\n\nexport default { getAll, create, update, setToken };\n","import axios from \"axios\";\nconst baseUrl = \"/api/login\";\n\nconst login = async (credentials) => {\n  const response = await axios.post(baseUrl, credentials);\n  return response.data;\n};\n\nexport default { login };\n","import React, { useState, useImperativeHandle } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Togglable = React.forwardRef(({ children, buttonLabel }, ref) => {\n  const [visible, setVisible] = useState(false);\n\n  const hideWhenVisible = { display: visible ? \"none\" : \"\" };\n  const showWhenVisible = { display: visible ? \"\" : \"none\" };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility,\n    };\n  });\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{buttonLabel}</button>\n      </div>\n      <div style={showWhenVisible} className=\"togglableContent\">\n        {children}\n        <button onClick={toggleVisibility}>cancel</button>\n      </div>\n    </div>\n  );\n});\n\nTogglable.displayName = \"Togglable\";\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired,\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddNoteForm = ({ createNote }) => {\n  const [newNote, setNewNote] = useState(\"a new note...\");\n\n  const handleChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n    createNote({\n      content: newNote,\n      important: false,\n    });\n\n    setNewNote(\"\");\n  };\n\n  return (\n    <div className=\"formDiv\">\n      <h2>Create a new note</h2>\n\n      <form onSubmit={handleOnSubmit}>\n        <input\n          id=\"new-note\"\n          type=\"text\"\n          value={newNote}\n          onChange={handleChange}\n        />\n        <button id=\"new-note-button\" type=\"submit\">\n          Save\n        </button>\n      </form>\n    </div>\n  );\n};\n\nAddNoteForm.propTypes = {\n  createNote: PropTypes.func.isRequired,\n};\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const LoginForm = ({ onLogin }) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleOnSubmit = (event) => {\n    event.preventDefault();\n\n    onLogin({ username, password });\n\n    setUsername(\"\");\n    setPassword(\"\");\n  };\n\n  return (\n    <div>\n      <h2>Login</h2>\n\n      <form onSubmit={handleOnSubmit}>\n        <div>\n          username\n          <input\n            id=\"username\"\n            type=\"text\"\n            value={username}\n            name=\"Username\"\n            onChange={({ target }) => setUsername(target.value)}\n          />\n        </div>\n        <div>\n          password\n          <input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            name=\"password\"\n            onChange={({ target }) => setPassword(target.value)}\n          />\n        </div>\n        <button id=\"login-button\" type=\"submit\">\n          Login\n        </button>\n      </form>\n    </div>\n  );\n};\n\nLoginForm.propTypes = {\n  onLogin: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n  return (\n    <li className=\"note\">\n      <span>{note.content}</span>\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nNote.propTypes = {\n  note: PropTypes.shape({\n    important: PropTypes.bool.isRequired,\n    content: PropTypes.string.isRequired,\n  }),\n  toggleImportance: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import React from \"react\";\n\nexport const Footer = () => {\n  const style = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n\n  return (\n    <div style={style}>\n      <br />\n      <em>\n        Note app, (c) 2021 - Department of Computer Science, University of\n        Helsinki\n      </em>\n    </div>\n  );\n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport noteService from \"./services/noteService\";\nimport loginService from \"./services/loginService\";\nimport { Togglable } from \"./components/Togglable\";\nimport { AddNoteForm } from \"./components/AddNoteForm\";\nimport { LoginForm } from \"./components/LoginForm\";\nimport { Note } from \"./components/Note\";\nimport { Notification } from \"./components/Notification\";\nimport { Footer } from \"./components/Footer\";\n\nexport const App = () => {\n  const [notes, setNotes] = useState([]);\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [user, setUser] = useState(null);\n\n  const noteFormRef = useRef();\n\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem(\"notes-app-user\");\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON);\n      setUser(user);\n      noteService.setToken(user.token);\n    }\n  }, []);\n\n  const handleError = (error) => {\n    setErrorMessage(error);\n    setTimeout(() => {\n      setErrorMessage(null);\n    }, 5000);\n  };\n\n  const handleLogin = async ({ username, password }) => {\n    try {\n      const user = await loginService.login({ username, password });\n\n      window.localStorage.setItem(\"notes-app-user\", JSON.stringify(user));\n\n      noteService.setToken(user.token);\n      setUser(user);\n    } catch (_error) {\n      handleError(\"Wrong credentials\");\n    }\n  };\n\n  const handleLogout = () => {\n    window.localStorage.removeItem(\"notes-app-user\");\n    setUser(null);\n  };\n\n  const handleCreateNote = async (noteObject) => {\n    noteFormRef.current.toggleVisibility();\n\n    try {\n      const returnedNote = await noteService.create(noteObject);\n      setNotes([...notes, returnedNote]);\n    } catch (error) {\n      handleError(error);\n    }\n  };\n\n  const toggleImportanceOf = async (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    try {\n      const returnedNote = await noteService.update(id, changedNote);\n      setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n    } catch (error) {\n      handleError(`Note '${note.content}' was already deleted from server`);\n    }\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes Fullstack App</h1>\n      <Notification message={errorMessage} />\n\n      {user === null ? (\n        <Togglable buttonLabel=\"log in\">\n          <LoginForm onLogin={handleLogin} onError={handleError} />\n        </Togglable>\n      ) : (\n        <div>\n          <p>\n            {user.name} logged-in\n            <button onClick={handleLogout}>Logout</button>\n          </p>\n\n          <Togglable buttonLabel=\"new note\" ref={noteFormRef}>\n            <AddNoteForm createNote={handleCreateNote} />\n          </Togglable>\n        </div>\n      )}\n\n      <h2>Notes</h2>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <Footer />\n    </div>\n  );\n};\n","import \"./index.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}